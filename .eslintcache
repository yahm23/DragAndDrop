[{"/Users/yousef/coding/drag_and_drop/src/reportWebVitals.js":"1","/Users/yousef/coding/drag_and_drop/src/App.js":"2","/Users/yousef/coding/drag_and_drop/src/Components/UploadContainer.js":"3","/Users/yousef/coding/drag_and_drop/src/Components/DragAndDrop.js":"4","/Users/yousef/coding/drag_and_drop/src/Components/FileList.js":"5","/Users/yousef/coding/drag_and_drop/src/functions.js":"6"},{"size":362,"mtime":1610198771634,"results":"7","hashOfConfig":"8"},{"size":183,"mtime":1610199265845,"results":"9","hashOfConfig":"8"},{"size":229,"mtime":1610199985272,"results":"10","hashOfConfig":"8"},{"size":1564,"mtime":1610202639051,"results":"11","hashOfConfig":"8"},{"size":571,"mtime":1610201817330,"results":"12","hashOfConfig":"8"},{"size":105,"mtime":1610201547170,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fimhm6",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yousef/coding/drag_and_drop/src/reportWebVitals.js",[],"/Users/yousef/coding/drag_and_drop/src/App.js",[],"/Users/yousef/coding/drag_and_drop/src/Components/UploadContainer.js",[],"/Users/yousef/coding/drag_and_drop/src/Components/DragAndDrop.js",["27"],"import React, {useState} from 'react'\nimport Dropzone from 'react-dropzone'\nimport { idGenerator } from '../functions'\nimport FileList from './FileList'\n\nexport default function DragAndDrop() {\n    const [fileList,setFileList] = useState([])\n\n\n    const addFileToList = (fileObject) =>{\n        let newObj = [...fileList]; // copying the old state\n        fileObject.id = idGenerator();\n        newObj.push(fileObject)\n        setFileList(newObj);\n    }\n\n    const editFileName = (fileID,newName)=>{\n        let updatedList = fileList.map(file => \n            {\n              if (file.id == fileID){\n                return {...file, name: newName}; //gets everything that was already in file, and updates name\n              }\n              return file; // else return unmodified item \n            });\n        \n            setFileList(updatedList)\n    }\n\n\n\n\n    return (\n        <div>\n            <h1>Drag and drop</h1>\n\n            <Dropzone onDrop={acceptedFiles => addFileToList(acceptedFiles[0])}>\n                {({getRootProps, getInputProps}) => (\n                <section>\n                    <div {...getRootProps()}>\n                        <p>Drag files here to upload</p>\n                        <input {...getInputProps()} />\n                        <button>Upload File</button>\n                    </div>\n                </section>\n                )}\n            </Dropzone>\n\n            <FileList editFileName={editFileName} files={fileList}/>\n\n            <button onClick={()=>{console.log( fileList)}}>Log fileList</button>\n        </div>\n    )\n}\n","/Users/yousef/coding/drag_and_drop/src/Components/FileList.js",[],"/Users/yousef/coding/drag_and_drop/src/functions.js",[],{"ruleId":"28","severity":1,"message":"29","line":20,"column":27,"nodeType":"30","messageId":"31","endLine":20,"endColumn":29},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]